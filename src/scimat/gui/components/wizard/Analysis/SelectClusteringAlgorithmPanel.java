/*
 * SelectClusteringAlgorithmPanel.java
 *
 * Created on 03-abr-2011, 19:32:36
 */
package scimat.gui.components.wizard.Analysis;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import scimat.analysis.ClusteringAlgorithmEnum;
import scimat.gui.components.wizard.GenericWizardStepPanel;

/**
 *
 * @author mjcobo
 */
public class SelectClusteringAlgorithmPanel extends GenericWizardStepPanel {

  /** Creates new form SelectClusteringAlgorithmPanel */
  public SelectClusteringAlgorithmPanel() {
    initComponents();

    this.maxNetworkSizeSpinner.addChangeListener(new ChangeListener() {

      public void stateChanged(ChangeEvent e) {
        
        int max = (Integer)maxNetworkSizeSpinner.getModel().getValue();
        int currentValue = (Integer)minNetworkSizeSpinner.getModel().getValue();
        
        minNetworkSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(currentValue, 1, max, 1));
      }
    });

    this.minNetworkSizeSpinner.addChangeListener(new ChangeListener() {

      public void stateChanged(ChangeEvent e) {

        int min = (Integer)minNetworkSizeSpinner.getModel().getValue();
        int currentValue = (Integer)maxNetworkSizeSpinner.getModel().getValue();

        maxNetworkSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(currentValue, min, null, 1));
      }
    });
  }

  /**
   *
   */
  @Override
  public void refresh() {

    this.clusteringAlgorithmbuttonGroup.clearSelection();
    this.minNetworkSizeSpinner.setEnabled(false);
    this.maxNetworkSizeSpinner.setEnabled(false);
    this.cutOffSpinner.setEnabled(false);
    fireIncorrectDataObservers();
  }

  /**
   * 
   */
  @Override
  public void fireIncorrectDataObservers() {

    if (this.clusteringAlgorithmbuttonGroup.getSelection() != null) {

      notifyIncorrectDataObservers(true, "");

    } else {

      notifyIncorrectDataObservers(false, "A clustering algorithm must be selected");
    }
  }

  /**
   * 
   * @return
   */
  public ClusteringAlgorithmEnum getSelectedClusteringAlgorithm() {

    ClusteringAlgorithmEnum clusteringAlgorithm = null;

    if (this.simpleCentersAlgorithmRadioButton.isSelected()) {

      clusteringAlgorithm = ClusteringAlgorithmEnum.CentersSimples;
      
    } else if (this.singleLinkRadioButton.isSelected()) {

      clusteringAlgorithm = ClusteringAlgorithmEnum.SingleLink;
      
    } else if (this.averageLinkRadioButton.isSelected()) {

      clusteringAlgorithm = ClusteringAlgorithmEnum.AverageLink;
      
    } else if (this.completeLinkRadioButton.isSelected()) {

      clusteringAlgorithm = ClusteringAlgorithmEnum.CompleteLink;
      
    } else if (this.sumLinkRadioButton.isSelected()) {

      clusteringAlgorithm = ClusteringAlgorithmEnum.SumLink;
      
    }

    return clusteringAlgorithm;
  }

  /**
   * 
   * @return
   */
  public int getMaxNetworkSize() {

    return (Integer)this.maxNetworkSizeSpinner.getModel().getValue();
  }

  /**
   * 
   * @return
   */
  public int getMinNetworkSize() {

    return (Integer)this.minNetworkSizeSpinner.getModel().getValue();
  }
  
  public double getCutOff() {
  
    return (Double)this.cutOffSpinner.getModel().getValue();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    clusteringAlgorithmbuttonGroup = new javax.swing.ButtonGroup();
    simpleCentersAlgorithmRadioButton = new javax.swing.JRadioButton();
    singleLinkRadioButton = new javax.swing.JRadioButton();
    completeLinkRadioButton = new javax.swing.JRadioButton();
    averageLinkRadioButton = new javax.swing.JRadioButton();
    sumLinkRadioButton = new javax.swing.JRadioButton();
    separator1 = new javax.swing.JSeparator();
    minNetworkSizeSpinner = new javax.swing.JSpinner();
    maxNetworkSizeSpinner = new javax.swing.JSpinner();
    minNetworkSizeDescriptionLabel = new javax.swing.JLabel();
    maxNetworkSizeDescriptionLabel = new javax.swing.JLabel();
    cutOffDescriptionLabel = new javax.swing.JLabel();
    cutOffSpinner = new javax.swing.JSpinner();

    clusteringAlgorithmbuttonGroup.add(simpleCentersAlgorithmRadioButton);
    simpleCentersAlgorithmRadioButton.setText("Simple centers algorithm");
    simpleCentersAlgorithmRadioButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        simpleCentersAlgorithmRadioButtonActionPerformed(evt);
      }
    });

    clusteringAlgorithmbuttonGroup.add(singleLinkRadioButton);
    singleLinkRadioButton.setText("Single link clustering algorithm");
    singleLinkRadioButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        singleLinkRadioButtonActionPerformed(evt);
      }
    });

    clusteringAlgorithmbuttonGroup.add(completeLinkRadioButton);
    completeLinkRadioButton.setText("Complete link clustering algorithm");
    completeLinkRadioButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        completeLinkRadioButtonActionPerformed(evt);
      }
    });

    clusteringAlgorithmbuttonGroup.add(averageLinkRadioButton);
    averageLinkRadioButton.setText("Average link clustering algorithm");
    averageLinkRadioButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        averageLinkRadioButtonActionPerformed(evt);
      }
    });

    clusteringAlgorithmbuttonGroup.add(sumLinkRadioButton);
    sumLinkRadioButton.setText("Sum link clustering algorithm");
    sumLinkRadioButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sumLinkRadioButtonActionPerformed(evt);
      }
    });

    minNetworkSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
    minNetworkSizeSpinner.setEnabled(false);

    maxNetworkSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
    maxNetworkSizeSpinner.setEnabled(false);

    minNetworkSizeDescriptionLabel.setLabelFor(minNetworkSizeSpinner);
    minNetworkSizeDescriptionLabel.setText("Minimum network size:");

    maxNetworkSizeDescriptionLabel.setLabelFor(maxNetworkSizeSpinner);
    maxNetworkSizeDescriptionLabel.setText("Maximum network size:");

    cutOffDescriptionLabel.setText("Cut off:");

    cutOffSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
    cutOffSpinner.setEnabled(false);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(singleLinkRadioButton)
          .addComponent(sumLinkRadioButton)
          .addComponent(averageLinkRadioButton)
          .addComponent(completeLinkRadioButton)
          .addComponent(simpleCentersAlgorithmRadioButton)
          .addComponent(separator1, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addGap(10, 10, 10)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(minNetworkSizeDescriptionLabel)
              .addComponent(maxNetworkSizeDescriptionLabel)
              .addComponent(cutOffDescriptionLabel))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(maxNetworkSizeSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
              .addComponent(minNetworkSizeSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
              .addComponent(cutOffSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE))))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(simpleCentersAlgorithmRadioButton)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(singleLinkRadioButton)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(completeLinkRadioButton)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(averageLinkRadioButton)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(sumLinkRadioButton)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(separator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(maxNetworkSizeDescriptionLabel)
          .addComponent(maxNetworkSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(minNetworkSizeDescriptionLabel)
          .addComponent(minNetworkSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(cutOffDescriptionLabel)
          .addComponent(cutOffSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  /**
   * 
   * @param evt 
   */
  private void simpleCentersAlgorithmRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleCentersAlgorithmRadioButtonActionPerformed

    this.minNetworkSizeSpinner.setEnabled(true);
    this.maxNetworkSizeSpinner.setEnabled(true);
    
    if (getSelectedClusteringAlgorithm().equals(ClusteringAlgorithmEnum.CentersSimples)) {
    
      this.cutOffSpinner.setEnabled(false);
      
    } else {
    
      this.cutOffSpinner.setEnabled(true);
    }
    
    fireIncorrectDataObservers();
  }//GEN-LAST:event_simpleCentersAlgorithmRadioButtonActionPerformed

  /**
   * 
   * @param evt 
   */
  private void singleLinkRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleLinkRadioButtonActionPerformed
    
    this.minNetworkSizeSpinner.setEnabled(true);
    this.maxNetworkSizeSpinner.setEnabled(true);
    this.cutOffSpinner.setEnabled(true);
    
    fireIncorrectDataObservers();
  }//GEN-LAST:event_singleLinkRadioButtonActionPerformed

  /**
   * 
   * @param evt 
   */
  private void completeLinkRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeLinkRadioButtonActionPerformed

    this.minNetworkSizeSpinner.setEnabled(true);
    this.maxNetworkSizeSpinner.setEnabled(true);
    this.cutOffSpinner.setEnabled(true);
    
    fireIncorrectDataObservers();
  }//GEN-LAST:event_completeLinkRadioButtonActionPerformed

  /**
   * 
   * @param evt 
   */
  private void averageLinkRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_averageLinkRadioButtonActionPerformed
    this.minNetworkSizeSpinner.setEnabled(true);
    this.maxNetworkSizeSpinner.setEnabled(true);
    this.cutOffSpinner.setEnabled(true);
    
    fireIncorrectDataObservers();
  }//GEN-LAST:event_averageLinkRadioButtonActionPerformed

  /**
   * 
   * @param evt 
   */
  private void sumLinkRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sumLinkRadioButtonActionPerformed
    
    this.minNetworkSizeSpinner.setEnabled(true);
    this.maxNetworkSizeSpinner.setEnabled(true);
    this.cutOffSpinner.setEnabled(true);
    
    fireIncorrectDataObservers();
  }//GEN-LAST:event_sumLinkRadioButtonActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JRadioButton averageLinkRadioButton;
  private javax.swing.ButtonGroup clusteringAlgorithmbuttonGroup;
  private javax.swing.JRadioButton completeLinkRadioButton;
  private javax.swing.JLabel cutOffDescriptionLabel;
  private javax.swing.JSpinner cutOffSpinner;
  private javax.swing.JLabel maxNetworkSizeDescriptionLabel;
  private javax.swing.JSpinner maxNetworkSizeSpinner;
  private javax.swing.JLabel minNetworkSizeDescriptionLabel;
  private javax.swing.JSpinner minNetworkSizeSpinner;
  private javax.swing.JSeparator separator1;
  private javax.swing.JRadioButton simpleCentersAlgorithmRadioButton;
  private javax.swing.JRadioButton singleLinkRadioButton;
  private javax.swing.JRadioButton sumLinkRadioButton;
  // End of variables declaration//GEN-END:variables
}

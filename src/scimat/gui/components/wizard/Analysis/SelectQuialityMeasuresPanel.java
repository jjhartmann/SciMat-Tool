/*
 * SelectQuialityMeasuresPanel.java
 *
 * Created on 03-abr-2011, 20:01:58
 */
package scimat.gui.components.wizard.Analysis;

import scimat.gui.components.wizard.GenericWizardStepPanel;

/**
 *
 * @author mjcobo
 */
public class SelectQuialityMeasuresPanel extends GenericWizardStepPanel {

  /** Creates new form SelectDocumentMappersPanel */
  public SelectQuialityMeasuresPanel() {
    initComponents();
  }

  @Override
  public void refresh() {

    this.qualityMeasuresSelected = 0;

    this.hIndexCheckBox.setSelected(false);
    this.averageCitationsCheckBox.setSelected(false);
    this.sumCitationsCheckBox.setSelected(false);
    this.maxCitationsCheckBox.setSelected(false);
    this.minCitationsCheckBox.setSelected(false);
  }

  @Override
  public void fireIncorrectDataObservers() {

    if (this.qualityMeasuresSelected > 0) {

      notifyIncorrectDataObservers(true, "");

    } else {

      notifyIncorrectDataObservers(false, "A set of quality measures must be selected");
    }
  }

  /**
   * 
   * @return
   */
  public boolean isHIndexSelected() {

    return this.hIndexCheckBox.isSelected();
  }
  
  /**
   * 
   * @return
   */
  public boolean isGIndexSelected() {

    return this.gIndexCheckBox.isSelected();
  }
  
  /**
   * 
   * @return
   */
  public boolean isHgIndexSelected() {

    return this.hgIndexCheckBox.isSelected();
  }
  
  /**
   * 
   * @return
   */
  public boolean isQ2IndexSelected() {

    return this.q2IndexCheckBox.isSelected();
  }

  /**
   *
   * @return
   */
  public boolean isAverageCitationsSelected() {

    return this.averageCitationsCheckBox.isSelected();
  }

  /**
   *
   * @return
   */
  public boolean isSumCitationsSelected() {

    return this.sumCitationsCheckBox.isSelected();
  }

  /**
   *
   * @return
   */
  public boolean isMaxCitationsSelected() {

    return this.maxCitationsCheckBox.isSelected();
  }

  /**
   *
   * @return
   */
  public boolean isMinCitationsSelected() {

    return this.minCitationsCheckBox.isSelected();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    hIndexCheckBox = new javax.swing.JCheckBox();
    gIndexCheckBox = new javax.swing.JCheckBox();
    q2IndexCheckBox = new javax.swing.JCheckBox();
    hgIndexCheckBox = new javax.swing.JCheckBox();
    averageCitationsCheckBox = new javax.swing.JCheckBox();
    sumCitationsCheckBox = new javax.swing.JCheckBox();
    maxCitationsCheckBox = new javax.swing.JCheckBox();
    minCitationsCheckBox = new javax.swing.JCheckBox();

    hIndexCheckBox.setText("h-index");
    hIndexCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        hIndexCheckBoxActionPerformed(evt);
      }
    });

    gIndexCheckBox.setText("g-index");
    gIndexCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        gIndexCheckBoxActionPerformed(evt);
      }
    });

    q2IndexCheckBox.setText("q2-index");
    q2IndexCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        q2IndexCheckBoxActionPerformed(evt);
      }
    });

    hgIndexCheckBox.setText("hg-index");
    hgIndexCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        hgIndexCheckBoxActionPerformed(evt);
      }
    });

    averageCitationsCheckBox.setText("Average citations");
    averageCitationsCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        averageCitationsCheckBoxActionPerformed(evt);
      }
    });

    sumCitationsCheckBox.setText("Sum citations");
    sumCitationsCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sumCitationsCheckBoxActionPerformed(evt);
      }
    });

    maxCitationsCheckBox.setText("Max citations");
    maxCitationsCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        maxCitationsCheckBoxActionPerformed(evt);
      }
    });

    minCitationsCheckBox.setText("Min citations");
    minCitationsCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        minCitationsCheckBoxActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(hIndexCheckBox)
      .addComponent(sumCitationsCheckBox)
      .addComponent(maxCitationsCheckBox)
      .addComponent(averageCitationsCheckBox)
      .addComponent(minCitationsCheckBox)
      .addComponent(gIndexCheckBox)
      .addComponent(q2IndexCheckBox)
      .addComponent(hgIndexCheckBox)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(hIndexCheckBox)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(gIndexCheckBox)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(q2IndexCheckBox)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(hgIndexCheckBox)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(averageCitationsCheckBox)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(sumCitationsCheckBox)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(maxCitationsCheckBox)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(minCitationsCheckBox))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void sumCitationsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sumCitationsCheckBoxActionPerformed

    if (this.sumCitationsCheckBox.isSelected()) {

      this.qualityMeasuresSelected ++;

    } else {

      this.qualityMeasuresSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_sumCitationsCheckBoxActionPerformed

  /**
   * 
   * @param evt
   */
  private void hIndexCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hIndexCheckBoxActionPerformed
    
    if (this.hIndexCheckBox.isSelected()) {

      this.qualityMeasuresSelected ++;
      
    } else {
      
      this.qualityMeasuresSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_hIndexCheckBoxActionPerformed

  /**
   *
   * @param evt
   */
  private void averageCitationsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_averageCitationsCheckBoxActionPerformed

    if (this.averageCitationsCheckBox.isSelected()) {

      this.qualityMeasuresSelected ++;

    } else {

      this.qualityMeasuresSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_averageCitationsCheckBoxActionPerformed

  /**
   *
   * @param evt
   */
  private void maxCitationsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxCitationsCheckBoxActionPerformed

    if (this.maxCitationsCheckBox.isSelected()) {

      this.qualityMeasuresSelected ++;

    } else {

      this.qualityMeasuresSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_maxCitationsCheckBoxActionPerformed

  /**
   *
   * @param evt
   */
  private void minCitationsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minCitationsCheckBoxActionPerformed

    if (this.minCitationsCheckBox.isSelected()) {

      this.qualityMeasuresSelected ++;

    } else {

      this.qualityMeasuresSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_minCitationsCheckBoxActionPerformed

  private void gIndexCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gIndexCheckBoxActionPerformed

    if (this.gIndexCheckBox.isSelected()) {

      this.qualityMeasuresSelected ++;

    } else {

      this.qualityMeasuresSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_gIndexCheckBoxActionPerformed

  private void q2IndexCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_q2IndexCheckBoxActionPerformed

    if (this.q2IndexCheckBox.isSelected()) {

      this.qualityMeasuresSelected ++;

    } else {

      this.qualityMeasuresSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_q2IndexCheckBoxActionPerformed

  private void hgIndexCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hgIndexCheckBoxActionPerformed
    
    if (this.hgIndexCheckBox.isSelected()) {

      this.qualityMeasuresSelected ++;

    } else {

      this.qualityMeasuresSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_hgIndexCheckBoxActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox averageCitationsCheckBox;
  private javax.swing.JCheckBox gIndexCheckBox;
  private javax.swing.JCheckBox hIndexCheckBox;
  private javax.swing.JCheckBox hgIndexCheckBox;
  private javax.swing.JCheckBox maxCitationsCheckBox;
  private javax.swing.JCheckBox minCitationsCheckBox;
  private javax.swing.JCheckBox q2IndexCheckBox;
  private javax.swing.JCheckBox sumCitationsCheckBox;
  // End of variables declaration//GEN-END:variables
  private int qualityMeasuresSelected = 0;
}

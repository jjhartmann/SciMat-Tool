/*
 * SelectPeriodNetworkReductionMethodPanel.java
 *
 * Created on 03-abr-2011, 19:08:32
 */
package scimat.gui.components.wizard.Analysis;

/**
 *
 * @author mjcobo
 */
public class SelectPeriodNetworkReductionMethodPanel extends javax.swing.JPanel {

  /** Creates new form SelectPeriodNetworkReductionMethodPanel */
  public SelectPeriodNetworkReductionMethodPanel() {
    initComponents();
  }

  /**
   * 
   */
  public void refresh() {
    
    this.coOccurrenceCheckBox.setSelected(false);
    this.minCoOccurrenceSpinner.setEnabled(false);
    this.minCoOccurrenceSpinner.setValue(1);
  }

  /**
   *
   * @return
   */
  public boolean isCoOccurrenceNetworkReductionSelected() {

    return this.coOccurrenceCheckBox.isSelected();
  }

  /**
   *
   * @return
   */
  public int getMinCoOccurrenceNetworkReductionSelected() {

    return (Integer)this.minCoOccurrenceSpinner.getModel().getValue();
  }

  /**
   * 
   * @param title
   */
  public void setTitleToMainPanel(String title) {

    this.setBorder(javax.swing.BorderFactory.createTitledBorder(title));
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    networkReductionPanel = new javax.swing.JPanel();
    coOccurrenceCheckBox = new javax.swing.JCheckBox();
    minCoOccurrenceDescriptionLabel = new javax.swing.JLabel();
    minCoOccurrenceSpinner = new javax.swing.JSpinner();

    jLabel1.setText("jLabel1");

    networkReductionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Network reduction"));

    coOccurrenceCheckBox.setText("Edge value reduction");
    coOccurrenceCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        coOccurrenceCheckBoxActionPerformed(evt);
      }
    });

    minCoOccurrenceDescriptionLabel.setText("Minimun value:");

    minCoOccurrenceSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
    minCoOccurrenceSpinner.setEnabled(false);

    javax.swing.GroupLayout networkReductionPanelLayout = new javax.swing.GroupLayout(networkReductionPanel);
    networkReductionPanel.setLayout(networkReductionPanelLayout);
    networkReductionPanelLayout.setHorizontalGroup(
      networkReductionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(networkReductionPanelLayout.createSequentialGroup()
        .addGroup(networkReductionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(networkReductionPanelLayout.createSequentialGroup()
            .addGap(27, 27, 27)
            .addComponent(minCoOccurrenceDescriptionLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(minCoOccurrenceSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
          .addGroup(networkReductionPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(coOccurrenceCheckBox)))
        .addContainerGap())
    );
    networkReductionPanelLayout.setVerticalGroup(
      networkReductionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(networkReductionPanelLayout.createSequentialGroup()
        .addComponent(coOccurrenceCheckBox)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(networkReductionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(minCoOccurrenceDescriptionLabel)
          .addComponent(minCoOccurrenceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(networkReductionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(networkReductionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
    );
  }// </editor-fold>//GEN-END:initComponents

  /**
   * 
   * @param evt
   */
  /**
   * 
   * @param evt
   */
  private void coOccurrenceCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coOccurrenceCheckBoxActionPerformed

    if (this.coOccurrenceCheckBox.isSelected()) {

      this.minCoOccurrenceSpinner.setEnabled(true);

    } else {

      this.minCoOccurrenceSpinner.setEnabled(false);
    }
  }//GEN-LAST:event_coOccurrenceCheckBoxActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox coOccurrenceCheckBox;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel minCoOccurrenceDescriptionLabel;
  private javax.swing.JSpinner minCoOccurrenceSpinner;
  private javax.swing.JPanel networkReductionPanel;
  // End of variables declaration//GEN-END:variables
}

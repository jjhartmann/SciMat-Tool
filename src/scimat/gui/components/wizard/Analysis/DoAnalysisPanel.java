/*
 * DoAnalysisPanel.java
 *
 * Created on 04-abr-2011, 10:49:48
 */
package scimat.gui.components.wizard.Analysis;

import java.util.concurrent.ExecutionException;
import javax.swing.JDialog;
import scimat.analysis.CurrentAnalysis;
import scimat.analysis.DoAnalysisWorker;
import scimat.analysis.AnalysisConfiguration;
import scimat.analysis.GlobalAnalysisResult;
import scimat.gui.commands.task.SaveAnalysisTask;
import scimat.gui.components.ErrorDialogManager;
import scimat.gui.components.analysisview.AnalysisViewManager;
import scimat.observabletask.ProgressTaskObserver;
import scimat.observabletask.StatusTaskObserver;
import scimat.observabletask.TaskStatus;
import scimat.project.CurrentProject;

/**
 *
 * @author mjcobo
 */
public class DoAnalysisPanel extends javax.swing.JPanel 
        implements StatusTaskObserver, ProgressTaskObserver {

  /** Creates new form DoAnalysisPanel */
  public DoAnalysisPanel(JDialog dialog) {
    this.dialog = dialog;
    initComponents();
  }

  /**
   * 
   */
  public void refreh() {

    this.globalProgressBar.setValue(0);
  }

  /**
   *
   * @param analysisConfiguration
   */
  public void execute(AnalysisConfiguration analysisConfiguration) {
    
    this.worker = new DoAnalysisWorker(CurrentProject.getInstance().getKnowledgeBase(), analysisConfiguration);
    worker.addProgressTaskObserver(this);
    worker.addStatusTaskObserver(this);
    this.worker.execute();
  }

  /**
   * 
   * @param status
   */
  public void statusTaskChanged(TaskStatus status) {

    switch (status) {

      case STARTED:
        System.out.println("Task started");
        break;

      case DONE:

        System.out.println("Task done");
        
        try {

          this.result = this.worker.get();

        } catch (ExecutionException e) {

        } catch (InterruptedException ie) {

        }

        this.dialog.dispose();
        CurrentAnalysis.getInstance().setResults(this.result);

        (new SaveAnalysisTask(this)).execute();

        AnalysisViewManager.getInstance().showAnalysisViewDialog();
        
        break;

      case CANCELLED:
        this.dialog.dispose();
        break;

      case EXCEPTION:
        
        Exception e = this.worker.getException();
    
        ErrorDialogManager.getInstance().showException(e);
        
        break;
    }
  }

  /**
   *
   * @param determinateMode
   * @param value
   */
   @Override
  public void progressChanged(boolean determinateMode, int value) {

    globalProgressBar.setIndeterminate(! determinateMode);
    globalProgressBar.setValue(value);
  }

   /**
    * 
    */
   public void cancelTask() {

     if ((this.worker != null) && (! this.worker.isDone())) {

       this.worker.cancel(true);
     }
   }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    currentPeriodLabel = new javax.swing.JLabel();
    globalProgressDescriptionLabel = new javax.swing.JLabel();
    globalProgressBar = new javax.swing.JProgressBar();

    globalProgressDescriptionLabel.setText("Global progress:");

    globalProgressBar.setStringPainted(true);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(80, 80, 80)
        .addComponent(currentPeriodLabel)
        .addContainerGap())
      .addGroup(layout.createSequentialGroup()
        .addComponent(globalProgressDescriptionLabel)
        .addContainerGap(166, Short.MAX_VALUE))
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(globalProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(currentPeriodLabel)
          .addComponent(globalProgressDescriptionLabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(globalProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
    );
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel currentPeriodLabel;
  private javax.swing.JProgressBar globalProgressBar;
  private javax.swing.JLabel globalProgressDescriptionLabel;
  // End of variables declaration//GEN-END:variables
  private DoAnalysisWorker worker;
  private GlobalAnalysisResult result;
  private JDialog dialog;
}

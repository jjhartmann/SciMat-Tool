/*
 * GlobalReplaceAffiliationPanel.java
 *
 * Created on 22-ene-2012, 17:52:08
 */
package scimat.gui.components.globalreplace;

import scimat.gui.commands.edit.globalreplace.GlobalReplaceReferencesEdit;
import scimat.gui.commands.task.PerformKnowledgeBaseEditTask;

/**
 *
 * @author mjcobo
 */
public class GlobalReplaceReferencePanel extends GlobalReplaceSelectFieldsPanel {

  /** Creates new form GlobalReplaceAffiliationPanel */
  public GlobalReplaceReferencePanel() {
    initComponents();
  }

  /**
   * 
   */
  @Override
  public void fireIncorrectDataObservers() {
    
    if (this.fieldsSelected > 0) {

      notifyIncorrectDataObservers(true, "");

    } else {

      notifyIncorrectDataObservers(false, "A set of fields must be selected");
    }
  }

  /**
   * 
   * @param find
   * @param replace 
   */
  @Override
  public void doGlobalReplaceAction(String find, String replace) {
    
    new PerformKnowledgeBaseEditTask(new GlobalReplaceReferencesEdit(find, 
            replace, 
            fullReferenceCheckBox.isSelected(), 
            volumeCheckBox.isSelected(), 
            issueCheckBox.isSelected(), 
            pageCheckBox.isSelected(), 
            doiCheckBox.isSelected(), 
            formatCheckBox.isSelected(), 
            yearCheckBox.isSelected()), this).execute();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fullReferenceCheckBox = new javax.swing.JCheckBox();
        volumeCheckBox = new javax.swing.JCheckBox();
        issueCheckBox = new javax.swing.JCheckBox();
        pageCheckBox = new javax.swing.JCheckBox();
        doiCheckBox = new javax.swing.JCheckBox();
        formatCheckBox = new javax.swing.JCheckBox();
        yearCheckBox = new javax.swing.JCheckBox();

        fullReferenceCheckBox.setText("Full reference");
        fullReferenceCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullReferenceCheckBoxActionPerformed(evt);
            }
        });

        volumeCheckBox.setText("Volume");
        volumeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volumeCheckBoxActionPerformed(evt);
            }
        });

        issueCheckBox.setText("Issue");
        issueCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issueCheckBoxActionPerformed(evt);
            }
        });

        pageCheckBox.setText("Page");
        pageCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pageCheckBoxActionPerformed(evt);
            }
        });

        doiCheckBox.setText("Doi");
        doiCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doiCheckBoxActionPerformed(evt);
            }
        });

        formatCheckBox.setText("Format");
        formatCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatCheckBoxActionPerformed(evt);
            }
        });

        yearCheckBox.setText("Year");
        yearCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fullReferenceCheckBox)
                    .addComponent(volumeCheckBox)
                    .addComponent(issueCheckBox)
                    .addComponent(pageCheckBox)
                    .addComponent(doiCheckBox)
                    .addComponent(formatCheckBox)
                    .addComponent(yearCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fullReferenceCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(volumeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(issueCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pageCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doiCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formatCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(yearCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

  /**
   * 
   * @param evt 
   */
  private void fullReferenceCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullReferenceCheckBoxActionPerformed
    
    if (this.fullReferenceCheckBox.isSelected()) {

      this.fieldsSelected ++;

    } else {

      this.fieldsSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_fullReferenceCheckBoxActionPerformed

  /**
   * 
   * @param evt 
   */
  /**
   * 
   * @param evt 
   */
  private void formatCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatCheckBoxActionPerformed
    
    if (this.formatCheckBox.isSelected()) {

      this.fieldsSelected ++;

    } else {

      this.fieldsSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_formatCheckBoxActionPerformed

  /**
   * 
   * @param evt 
   */
  private void doiCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doiCheckBoxActionPerformed
    
    if (this.doiCheckBox.isSelected()) {

      this.fieldsSelected ++;

    } else {

      this.fieldsSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_doiCheckBoxActionPerformed

  /**
   * 
   * @param evt 
   */
  /**
   * 
   * @param evt 
   */
  private void volumeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volumeCheckBoxActionPerformed
    
    if (this.volumeCheckBox.isSelected()) {

      this.fieldsSelected ++;

    } else {

      this.fieldsSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_volumeCheckBoxActionPerformed

  /**
   * 
   * @param evt 
   */
  private void issueCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_issueCheckBoxActionPerformed
    
    if (this.issueCheckBox.isSelected()) {

      this.fieldsSelected ++;

    } else {

      this.fieldsSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_issueCheckBoxActionPerformed

  /**
   * 
   * @param evt 
   */
  private void pageCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pageCheckBoxActionPerformed
    
    if (this.pageCheckBox.isSelected()) {

      this.fieldsSelected ++;

    } else {

      this.fieldsSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_pageCheckBoxActionPerformed

  /**
   * 
   * @param evt 
   */
  private void yearCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearCheckBoxActionPerformed
    
    if (this.yearCheckBox.isSelected()) {

      this.fieldsSelected ++;

    } else {

      this.fieldsSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_yearCheckBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox doiCheckBox;
    private javax.swing.JCheckBox formatCheckBox;
    private javax.swing.JCheckBox fullReferenceCheckBox;
    private javax.swing.JCheckBox issueCheckBox;
    private javax.swing.JCheckBox pageCheckBox;
    private javax.swing.JCheckBox volumeCheckBox;
    private javax.swing.JCheckBox yearCheckBox;
    // End of variables declaration//GEN-END:variables
  private int fieldsSelected = 0;
}

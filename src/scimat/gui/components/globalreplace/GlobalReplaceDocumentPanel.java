/*
 * GlobalReplaceAffiliationPanel.java
 *
 * Created on 22-ene-2012, 17:52:08
 */
package scimat.gui.components.globalreplace;

import scimat.gui.commands.edit.globalreplace.GlobalReplaceDocumentsEdit;
import scimat.gui.commands.task.PerformKnowledgeBaseEditTask;

/**
 *
 * @author mjcobo
 */
public class GlobalReplaceDocumentPanel extends GlobalReplaceSelectFieldsPanel {

  /** Creates new form GlobalReplaceAffiliationPanel */
  public GlobalReplaceDocumentPanel() {
    initComponents();
  }

  /**
   * 
   */
  @Override
  public void fireIncorrectDataObservers() {
    
    if (this.fieldsSelected > 0) {

      notifyIncorrectDataObservers(true, "");

    } else {

      notifyIncorrectDataObservers(false, "A set of fields must be selected");
    }
  }

  /**
   * 
   * @param find
   * @param replace 
   */
  @Override
  public void doGlobalReplaceAction(String find, String replace) {
    
    new PerformKnowledgeBaseEditTask(new GlobalReplaceDocumentsEdit(find, 
            replace, 
            this.titleCheckBox.isSelected(), 
            docAbstractCheckBox.isSelected(), 
            typeCheckBox.isSelected(), 
            doiCheckBox.isSelected(), 
            sourceIdentifierCheckBox.isSelected(), 
            volumeCheckBox.isSelected(), 
            issueCheckBox.isSelected(), 
            beginPageCheckBox.isSelected(), 
            endPageCheckBox.isSelected()), this).execute();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleCheckBox = new javax.swing.JCheckBox();
        docAbstractCheckBox = new javax.swing.JCheckBox();
        typeCheckBox = new javax.swing.JCheckBox();
        doiCheckBox = new javax.swing.JCheckBox();
        sourceIdentifierCheckBox = new javax.swing.JCheckBox();
        volumeCheckBox = new javax.swing.JCheckBox();
        issueCheckBox = new javax.swing.JCheckBox();
        beginPageCheckBox = new javax.swing.JCheckBox();
        endPageCheckBox = new javax.swing.JCheckBox();

        titleCheckBox.setText("Title");
        titleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleCheckBoxActionPerformed(evt);
            }
        });

        docAbstractCheckBox.setText("Abstract");
        docAbstractCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                docAbstractCheckBoxActionPerformed(evt);
            }
        });

        typeCheckBox.setText("Type");
        typeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeCheckBoxActionPerformed(evt);
            }
        });

        doiCheckBox.setText("Doi");
        doiCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doiCheckBoxActionPerformed(evt);
            }
        });

        sourceIdentifierCheckBox.setText("Source identifier");
        sourceIdentifierCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceIdentifierCheckBoxActionPerformed(evt);
            }
        });

        volumeCheckBox.setText("Volume");
        volumeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volumeCheckBoxActionPerformed(evt);
            }
        });

        issueCheckBox.setText("Issue");
        issueCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issueCheckBoxActionPerformed(evt);
            }
        });

        beginPageCheckBox.setText("Begin page");
        beginPageCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beginPageCheckBoxActionPerformed(evt);
            }
        });

        endPageCheckBox.setText("End page");
        endPageCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endPageCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleCheckBox)
                    .addComponent(docAbstractCheckBox)
                    .addComponent(typeCheckBox)
                    .addComponent(doiCheckBox)
                    .addComponent(sourceIdentifierCheckBox)
                    .addComponent(volumeCheckBox)
                    .addComponent(issueCheckBox)
                    .addComponent(beginPageCheckBox)
                    .addComponent(endPageCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(docAbstractCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doiCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sourceIdentifierCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(volumeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(issueCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(beginPageCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endPageCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

  /**
   * 
   * @param evt 
   */
  private void titleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleCheckBoxActionPerformed
    
    if (this.titleCheckBox.isSelected()) {

      this.fieldsSelected ++;

    } else {

      this.fieldsSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_titleCheckBoxActionPerformed

  /**
   * 
   * @param evt 
   */
  private void docAbstractCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_docAbstractCheckBoxActionPerformed
    
    if (this.docAbstractCheckBox.isSelected()) {

      this.fieldsSelected ++;

    } else {

      this.fieldsSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_docAbstractCheckBoxActionPerformed

  /**
   * 
   * @param evt 
   */
  private void typeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeCheckBoxActionPerformed
    
    if (this.typeCheckBox.isSelected()) {

      this.fieldsSelected ++;

    } else {

      this.fieldsSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_typeCheckBoxActionPerformed

  /**
   * 
   * @param evt 
   */
  private void doiCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doiCheckBoxActionPerformed
    
    if (this.doiCheckBox.isSelected()) {

      this.fieldsSelected ++;

    } else {

      this.fieldsSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_doiCheckBoxActionPerformed

  /**
   * 
   * @param evt 
   */
  private void sourceIdentifierCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceIdentifierCheckBoxActionPerformed
    
    if (this.sourceIdentifierCheckBox.isSelected()) {

      this.fieldsSelected ++;

    } else {

      this.fieldsSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_sourceIdentifierCheckBoxActionPerformed

  /**
   * 
   * @param evt 
   */
  private void volumeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volumeCheckBoxActionPerformed
    
    if (this.volumeCheckBox.isSelected()) {

      this.fieldsSelected ++;

    } else {

      this.fieldsSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_volumeCheckBoxActionPerformed

  /**
   * 
   * @param evt 
   */
  private void issueCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_issueCheckBoxActionPerformed
    
    if (this.issueCheckBox.isSelected()) {

      this.fieldsSelected ++;

    } else {

      this.fieldsSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_issueCheckBoxActionPerformed

  /**
   * 
   * @param evt 
   */
  private void beginPageCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beginPageCheckBoxActionPerformed
    
    if (this.beginPageCheckBox.isSelected()) {

      this.fieldsSelected ++;

    } else {

      this.fieldsSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_beginPageCheckBoxActionPerformed

  /**
   * 
   * @param evt 
   */
  private void endPageCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endPageCheckBoxActionPerformed
    
    if (this.endPageCheckBox.isSelected()) {

      this.fieldsSelected ++;

    } else {

      this.fieldsSelected --;
    }

    fireIncorrectDataObservers();
  }//GEN-LAST:event_endPageCheckBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox beginPageCheckBox;
    private javax.swing.JCheckBox docAbstractCheckBox;
    private javax.swing.JCheckBox doiCheckBox;
    private javax.swing.JCheckBox endPageCheckBox;
    private javax.swing.JCheckBox issueCheckBox;
    private javax.swing.JCheckBox sourceIdentifierCheckBox;
    private javax.swing.JCheckBox titleCheckBox;
    private javax.swing.JCheckBox typeCheckBox;
    private javax.swing.JCheckBox volumeCheckBox;
    // End of variables declaration//GEN-END:variables
  private int fieldsSelected = 0;
}

/*
 * GenericSlaveListPanel.java
 *
 * Created on 21-mar-2011, 17:55:47
 */
package scimat.gui.components.slavepanel;

import java.util.ArrayList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableRowSorter;
import scimat.gui.components.observer.ElementsCountObserver;
import scimat.gui.components.observer.SelectionObserver;
import scimat.gui.components.tablemodel.GenericTableModel;

/**
 * 
 * @author mjcobo
 * @param <M> Master item
 * @param <S> Slave item
 */
public abstract class GenericSlaveListPanel<M, S>
        extends javax.swing.JPanel
        implements ElementsCountObserver {

  /** Creates new form GenericSlaveListPanel */
  public GenericSlaveListPanel(GenericTableModel<S> tableModel) {

    this.tableModel = tableModel;
    
    this.tableRowSorter = new TableRowSorter<GenericTableModel<S>>(tableModel);

    this.tableModel.addElementsCountObserver(this);

    this.selectionObservers = new ArrayList<SelectionObserver>();
    this.selectedRows = new int[0];

    this.masterItem = null;

    initComponents();
    
    this.table.setModel(tableModel);

    this.table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

      public void valueChanged(ListSelectionEvent e) {

        if (! e.getValueIsAdjusting()) {

          notifySelectionObserver(table.getSelectedRows());
        }
      }
    });
  }

  public abstract void setMasterItem(M masterItem);

  public M getMasterItem() {
    return masterItem;
  }

  /**
   * 
   * @param items
   */
  public void refreshData(ArrayList<S> items) {

    this.tableModel.refreshItems(items);
  }

  /**
   *
   * @param rowIndex
   * @return
   */
  public S getItem(int rowIndex) {

    return this.tableModel.getItem(rowIndex);
  }

  /**
   *
   * @param rowIndexes
   * @return
   */
  public ArrayList<S> getSelectedItems() {

    int i;
    ArrayList<S> items = new ArrayList<S>();

    for (i = 0; i < this.selectedRows.length; i++) {

      items.add(getItem(this.selectedRows[i]));
    }

    return items;
  }

  /**
   *
   * @return
   */
  public int[] getSelectedRows() {

    return this.selectedRows;
  }

  /**
   *
   * @param o
   */
  public void addSelectionObserver(SelectionObserver o) {

    selectionObservers.add(o);
    //o.selectionChangeHappened(_selectedRows);
  }

  /**
   *
   * @param selection
   */
  private void notifySelectionObserver(int[] selection) {

    int i;

    this.selectedRows = new int[selection.length];

    for (i = 0; i < selection.length; i++){

      this.selectedRows[i] = table.convertRowIndexToModel(selection[i]);
    }

    for (i = 0; i < this.selectionObservers.size(); i++) {
      this.selectionObservers.get(i).selectionChangeHappened(this.selectedRows);
    }
  }

  /**
   *
   * @param newElementsCount
   */
  public void elementsCountChanged(int newElementsCount) {
    this.itemsCountLabel.setText(String.valueOf(newElementsCount));
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    scrollPane = new javax.swing.JScrollPane();
    table = new javax.swing.JTable();
    itemsCountDescriptionLabel = new javax.swing.JLabel();
    itemsCountLabel = new javax.swing.JLabel();

    table.setRowSorter(this.tableRowSorter);
    scrollPane.setViewportView(table);

    itemsCountDescriptionLabel.setText("Items:");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(itemsCountDescriptionLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(itemsCountLabel))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(itemsCountLabel)
          .addComponent(itemsCountDescriptionLabel)))
    );
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel itemsCountDescriptionLabel;
  private javax.swing.JLabel itemsCountLabel;
  private javax.swing.JScrollPane scrollPane;
  private javax.swing.JTable table;
  // End of variables declaration//GEN-END:variables
  protected M masterItem;
  private GenericTableModel<S> tableModel;
  private ArrayList<SelectionObserver> selectionObservers;
  private TableRowSorter<GenericTableModel<S>> tableRowSorter;
  private int[] selectedRows;
}

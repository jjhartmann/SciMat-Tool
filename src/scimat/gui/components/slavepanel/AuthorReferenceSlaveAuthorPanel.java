/*
 * AuthorReferenceSlaveAuthorPanel.java
 *
 * Created on 21-mar-2011, 12:17:06
 */
package scimat.gui.components.slavepanel;

import java.util.ArrayList;
import scimat.gui.components.ErrorDialogManager;
import scimat.model.knowledgebase.entity.Author;
import scimat.model.knowledgebase.entity.AuthorReference;
import scimat.model.knowledgebase.exception.KnowledgeBaseException;
import scimat.project.CurrentProject;
import scimat.project.observer.AuthorRelationAuthorReferenceObserver;
import scimat.project.observer.EntityObserver;

/**
 *
 * @author mjcobo
 */
public class AuthorReferenceSlaveAuthorPanel extends javax.swing.JPanel
        implements AuthorRelationAuthorReferenceObserver, EntityObserver<Author> {

  /** Creates new form AuthorReferenceSlaveAuthorPanel */
  public AuthorReferenceSlaveAuthorPanel() {
    initComponents();
    
    CurrentProject.getInstance().getKbObserver().addAuthorObserver(this);
  }

  /**
   *
   */
  private void refresh() {

    if (this.author != null) {

      this.nameTextField.setText(this.author.getAuthorName());
      this.fullNameTextField.setText(this.author.getFullAuthorName());

    } else {

      this.nameTextField.setText("");
      this.fullNameTextField.setText("");
    }
  }

  /**
   *
   */
  public void setMasterItem(AuthorReference authorReference) {

    this.authorReference = authorReference;

    try {

      if (this.authorReference != null) {

        relationChanged();

      } else {

        this.author = null;
        refresh();

      }

    } catch (KnowledgeBaseException e) {
    
      ErrorDialogManager.getInstance().showException(e);

    }
  }

  /**
   *
   */
  public void relationChanged() throws KnowledgeBaseException {

    if (this.authorReference != null) {
    
      this.author = CurrentProject.getInstance().getFactoryDAO().getAuthorReferenceDAO().getAuthor(this.authorReference.getAuthorReferenceID());
    
    } else {
    
      this.author = null;
    }
    
    refresh();
  }

  /**
   *
   * @param items
   * @throws KnowledgeBaseException
   */
  public void entityAdded(ArrayList<Author> items) throws KnowledgeBaseException {
    // Do not do nothing
  }

  /**
   *
   * @param entity
   * @throws KnowledgeBaseException
   */
  public void entityRefresh() throws KnowledgeBaseException {

    if (this.author != null) {

      this.author = CurrentProject.getInstance().getFactoryDAO().getAuthorDAO().getAuthor(this.authorReference.getAuthorReferenceID());
      refresh();
    }
  }

  /**
   *
   * @param items
   * @throws KnowledgeBaseException
   */
  public void entityRemoved(ArrayList<Author> items) throws KnowledgeBaseException {
    // Do not do nothing
  }

  /**
   *
   * @param items
   * @throws KnowledgeBaseException
   */
  public void entityUpdated(ArrayList<Author> items) throws KnowledgeBaseException {

    int position;

    if (this.author != null) {

      position = items.indexOf(this.author);

      if (position != -1) {

        this.author = items.get(position);
      }
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    nameDescriptionLabel = new javax.swing.JLabel();
    nameTextField = new javax.swing.JTextField();
    fullNameDescriptionLabel = new javax.swing.JLabel();
    fullNameTextField = new javax.swing.JTextField();

    nameDescriptionLabel.setText("Name:");

    nameTextField.setEditable(false);

    fullNameDescriptionLabel.setText("Full name:");

    fullNameTextField.setEditable(false);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(fullNameDescriptionLabel)
          .addComponent(nameDescriptionLabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(fullNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
          .addComponent(nameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(nameDescriptionLabel)
          .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(fullNameDescriptionLabel)
          .addComponent(fullNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
    );
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel fullNameDescriptionLabel;
  private javax.swing.JTextField fullNameTextField;
  private javax.swing.JLabel nameDescriptionLabel;
  private javax.swing.JTextField nameTextField;
  // End of variables declaration//GEN-END:variables
  private AuthorReference authorReference = null;
  private Author author = null;
}

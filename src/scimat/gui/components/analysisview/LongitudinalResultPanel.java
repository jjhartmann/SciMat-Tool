/*
 * LongitudinalResultPanel.java
 *
 * Created on 05-abr-2011, 13:04:31
 */
package scimat.gui.components.analysisview;

import java.util.ArrayList;
import scimat.api.mapping.clustering.result.ClusterSet;
import scimat.analysis.BuildPerformanceMeasuresAvailable;
import scimat.analysis.CurrentAnalysis;
import scimat.analysis.KeyProperties;
import scimat.analysis.PerformanceMeasuresAvailable;
import scimat.gui.components.itemslist.GenericItemsListPanel;
import scimat.gui.components.observer.SelectionObserver;
import scimat.gui.components.tablemodel.PerformanceMeasuresAvailableTableModel;

/**
 *
 * @author mjcobo
 */
public class LongitudinalResultPanel extends javax.swing.JPanel {

  /** Creates new form LongitudinalResultPanel */
  public LongitudinalResultPanel() {
    
    this.performanceMeasuresAvailableListPanel = new GenericItemsListPanel<PerformanceMeasuresAvailable>(new PerformanceMeasuresAvailableTableModel());
    
    initComponents();
    
    this.performanceMeasuresPanel.add(this.performanceMeasuresAvailableListPanel);
    
    this.performanceMeasuresAvailableListPanel.addSelectionObserver(new PerformanceMeasuresAvailableObserver());
  }
  
  /**
   * 
   */
  public void refresh() {
  
    int i;
    clusterSets = new ArrayList<ClusterSet>();
    
    for (i = 0; i < CurrentAnalysis.getInstance().getResults().getAnalysisPeriodResultsCount(); i++) {
    
      clusterSets.add(CurrentAnalysis.getInstance().getResults().getAnalysisPeriodResult(i).getClusterSet());
    }
    
    this.overlappingMapPanel.refreshItems(CurrentAnalysis.getInstance().getResults().getLongitudinalResult().getOverlappingMap());
    this.performanceMeasuresAvailableListPanel.refreshItems(this.buildPerformanceMeasuresAvailable.build());
    
    refreshEvolutionMap();
    
    //this.overlappingMapPanel.refreshItems();
    //this.pruebaPanel1.refreshItems();
  }
  
  private class PerformanceMeasuresAvailableObserver implements SelectionObserver {

    public void selectionChangeHappened(int[] selection) {
      
      if (selection.length == 1) {
      
        selectedMeasure = performanceMeasuresAvailableListPanel.getItem(selection[0]);
        refreshEvolutionMap();
        
      } else {
      
        selectedMeasure = null;

      }
    }
  }
  
  public void refreshEvolutionMap() {
  
    if (this.selectedMeasure != null) {
    
      this.evolutionMapPanel.refreshItems(clusterSets, 
            CurrentAnalysis.getInstance().getResults().getLongitudinalResult().getEvolutionMap(),
            this.selectedMeasure.getMapper() + this.selectedMeasure.getPropertyKey(),
            KeyProperties.__KEY_CLUSTER_LABEL);
      
    } else {
    
      this.evolutionMapPanel.refreshItems(clusterSets, 
            CurrentAnalysis.getInstance().getResults().getLongitudinalResult().getEvolutionMap(), 
            null,
            KeyProperties.__KEY_CLUSTER_LABEL);
    }
    
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    overlappingMapPanel = new scimat.gui.components.analysisview.OverlappingMapPanel();
    hideAndShowOverlappinMapPanel = new scimat.gui.components.HideAndShowPanel();
    hideAndShowEvolutionMapPanel = new scimat.gui.components.HideAndShowPanel();
    downPanel = new javax.swing.JPanel();
    performanceMeasuresPanel = new javax.swing.JPanel();
    evolutionMapPanel = new scimat.gui.components.analysisview.EvolutionMapPanel();

    this.hideAndShowOverlappinMapPanel.setDescription("Overlapping map");
    this.hideAndShowOverlappinMapPanel.setPanel(overlappingMapPanel);

    this.hideAndShowEvolutionMapPanel.setDescription("Evolution map");
    this.hideAndShowEvolutionMapPanel.setPanel(downPanel);

    performanceMeasuresPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Performance measures"));
    performanceMeasuresPanel.setLayout(new javax.swing.BoxLayout(performanceMeasuresPanel, javax.swing.BoxLayout.LINE_AXIS));

    javax.swing.GroupLayout downPanelLayout = new javax.swing.GroupLayout(downPanel);
    downPanel.setLayout(downPanelLayout);
    downPanelLayout.setHorizontalGroup(
      downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(downPanelLayout.createSequentialGroup()
        .addComponent(performanceMeasuresPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(evolutionMapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE))
    );
    downPanelLayout.setVerticalGroup(
      downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(evolutionMapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
      .addComponent(performanceMeasuresPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(hideAndShowOverlappinMapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
          .addComponent(overlappingMapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
          .addComponent(hideAndShowEvolutionMapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
          .addComponent(downPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(hideAndShowOverlappinMapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(overlappingMapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(hideAndShowEvolutionMapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(6, 6, 6)
        .addComponent(downPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel downPanel;
  private scimat.gui.components.analysisview.EvolutionMapPanel evolutionMapPanel;
  private scimat.gui.components.HideAndShowPanel hideAndShowEvolutionMapPanel;
  private scimat.gui.components.HideAndShowPanel hideAndShowOverlappinMapPanel;
  private scimat.gui.components.analysisview.OverlappingMapPanel overlappingMapPanel;
  private javax.swing.JPanel performanceMeasuresPanel;
  // End of variables declaration//GEN-END:variables
  private GenericItemsListPanel<PerformanceMeasuresAvailable> performanceMeasuresAvailableListPanel;
  private BuildPerformanceMeasuresAvailable buildPerformanceMeasuresAvailable = new BuildPerformanceMeasuresAvailable();
  private PerformanceMeasuresAvailable selectedMeasure = null;
  private ArrayList<ClusterSet> clusterSets;
}
